<?xml version="1.0"?>
<ruleset name="Soonick">
    <description>Coding standard based on Zend with some additions.</description>

        <!-- PSR-2 standard -->

        <!-- 2.1. PHP Tags -->

        <!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it MUST NOT use the other tag variations. -->
        <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
            <severity>0</severity>
        </rule>

        <!-- 2.2. Character Encoding -->

        <!-- PHP code MUST use only UTF-8 without BOM. -->
        <rule ref="Generic.Files.ByteOrderMark"/>

        <!-- 3. Namespace and Class Names -->

        <!-- Namespaces and classes MUST follow PSR-0.
             This means each class is in a file by itself, and is in a namespace of at least one level: a top-level vendor name. -->
        <!-- checked in Classes/ClassDeclarationSniff -->

        <!-- Class names MUST be declared in StudlyCaps. -->
        <!-- 不使用駝峰式class name
        <rule ref="Squiz.Classes.ValidClassName"/>
        -->

        <!-- 4. Class Constants, Properties, and Methods -->

        <!-- 4.1. Constants -->

        <!-- Class constants MUST be declared in all upper case with underscore separators. -->
        <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

        <!-- 4.3. Methods -->

        <!-- Method names MUST be declared in camelCase(). -->
        <!-- 不使用駝峰式class name
        <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
            <properties>
                <property name="strict" value="false"/>
            </properties>
        </rule>
        -->

    <!-- PSR-2 standard -->

    <!-- 2. General -->

    <!-- 2.1 Basic Coding Standard -->

    <!-- 2.2 Files -->

    <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- All PHP files MUST end with a single blank line. -->
    <!-- checked in Files/EndFileNewlineSniff -->

    <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- 2.3 Lines -->

    <!-- The soft limit on line length MUST be 120 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

    <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>0</severity>
    </rule>

    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- 2.4 Indenting -->

    <!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- 2.5 Keywords and True/False/Null -->

    <!-- PHP keywords MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- The PHP constants true, false, and null MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- 4.3 Methods -->

    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
    <!-- checked in Methods/MethodDeclarationSniff -->

    <!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
    <!--
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
    不使用 camel caps format

    <rule ref="PEAR.Functions.FunctionCallSignature"/>

    -->

    <!-- 4.3 Method Arguments -->

    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>

    <!-- Method arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <!-- 4.5 Method and Function Calls -->

    <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
    Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>

    <!-- 5. Control Structures -->

    <!-- The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The closing brace MUST be on the next line after the body -->
    <rule ref="Squiz.ControlStructures.ControlSignature">
        <properties>
            <property name="ignoreComments" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <!-- checked in ControlStructures/ControlStructureSpacingSniff -->

    <!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>


    <!-- Fuel PHP Standard -->
    <exclude-pattern>tests/*</exclude-pattern>
    <!--
        ###################
        # File Formatting #
        ###################
    -->

    <!--
        File Naming

        All file names must be all lower case. No exceptions.

        Checked in FuelPHP.NamingConventions.LowerCaseFileName
    -->

    <!--
        ######################
        # Naming Conventions #
        ######################
    -->

    <!--
        Namespaces

        All core classes must be under the Fuel\Core namespace.
    -->
    <!-- TODO -->

    <!--
        Classes

        Class names should use underscores to separate words, and each word
        in the class name should begin with a capital letter.
    -->
    <rule ref="PEAR.NamingConventions.ValidClassName"/>

    <!--
        Methods

        Method names should use underscores to separate words, not CamelCase.
        Method names should also be all lower case.
        Visibility should always be included (public, protected, private).

        Checked in FuelPHP.NamingConventions.UnderscoredWithScopeFunctionName
    -->

    <!--
        Variables

        Variable names should be concise and contain only lower case letters and underscores.

        Checked in FuelPHP.NamingConventions.ConciseUnderscoredVariableName
    -->

    <!--
        Constants

        Constants follow the same guide lines as variables with the exception that constants
        should be all upper case.
    -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!--
        Keywords

        Keywords such as true, false, null, as, etc should be all lower case, as upper case
        is reserved for constants.
        Same goes for primitive types like array, integer, string.
    -->

    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <!--
    <rule ref="Squiz.Arrays.ArrayDeclaration" />
    -->
    <!-- TODO : complete for other keywords -->


    <!--
        Function/Method/Closure Declarations

        The function/method/closure opening brace must always begin on a new line and have the same indentation as its structure.
    -->
    <!--
    註解，此行會造成
    public static function forge(
        $c_class = '',
        $c_method = ''
    ) {         // 這邊出錯
        $tmp = '';
        $tmp .= 'FILE: '.$c_file."\n";
    }
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman" />
    -->

    <!--
        Variables

        When initializing variables, one variable should be declared per line.
        To enhance code readability, these should each be on a separate line.
        Align values and comments when appropriate.

        Note : this is extended to one statement per line
    -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements" />

    <!--
        Brackets and Parenthesis

        No space should come before or after the initial bracket/parenthesis.
        There should not be a space before closing bracket/parenthesis.
    -->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!--
        String quotation

        Single quotes are preferred over double quotes.
    -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />


    <!--
        Operators

        Space before and after logical operator.
        Space before and after math operator.
        No space before and after increment.

        The latter is checked in FuelPHP.WhiteSpace.IncrementDecrementSpacing
    -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.OperatorSpacing" />


</ruleset>
